(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = addEmojiTitle;

var _helper = require('./helper');

function addEmojiTitle() {
	var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	var title = document.title.split('|');

	Object.keys(config).forEach(function (page) {
		if ((0, _helper.isMacOS)() && (0, _helper.currentPage)(page)) {
			document.title = '' + title[0] + config[page] + ' | ' + title[1];
		}
	});
}

},{"./helper":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var $ = document.querySelector.bind(document);
var $$ = document.querySelectorAll.bind(document);

var getOffset = function getOffset(elem) {
	var offsetTop = 0;
	do {
		if (!isNaN(elem.offsetTop)) {
			offsetTop += elem.offsetTop;
		}
	} while (elem = elem.offsetParent);
	return offsetTop;
};

var isMacOS = function isMacOS() {
	return navigator.userAgent.indexOf('Mac OS X') != -1;
};

var currentPage = function currentPage(name) {
	return document.body.classList.contains('template-' + name);
};

var requestAnimFrame = function requestAnimFrame() {
	return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
		window.setTimeout(callback, 1000 / 60);
	};
};

var easeInOutQuint = function easeInOutQuint(time, start, change, duration) {
	if ((time /= duration / 2) < 1) {
		return change / 2 * time * time * time * time * time + start;
	}
	return change / 2 * ((time -= 2) * time * time * time * time + 2) + start;
};

var windowPosition = function windowPosition() {
	return document.documentElement.scrollTop || document.body.parentNode.scrollTop || document.body.scrollTop;
};

exports.$ = $;
exports.$$ = $$;
exports.getOffset = getOffset;
exports.isMacOS = isMacOS;
exports.currentPage = currentPage;
exports.requestAnimFrame = requestAnimFrame;
exports.easeInOutQuint = easeInOutQuint;
exports.windowPosition = windowPosition;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = highlightSVGMap;
function highlightSVGMap() {
	var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	var trigger = config.trigger;
	var hover = config.hover;
	var defaultState = config.defaultState;
	var country = config.map.querySelector('' + trigger.getAttribute(config.attr));

	function toggleHighlight(event) {
		if (event.type === 'mouseover') {
			country.style.fill = hover;
			country.style.stroke = 'white';
		} else {
			country.style.fill = 'white';
			country.style.stroke = defaultState;
		}
	}

	trigger.addEventListener('mouseover', toggleHighlight, false);
	trigger.addEventListener('mouseleave', toggleHighlight, false);
}

},{}],4:[function(require,module,exports){
'use strict';

var _helper = require('./helper');

var _addEmojiTitle = require('./add-emoji-title');

var _addEmojiTitle2 = _interopRequireDefault(_addEmojiTitle);

var _setNavigationState = require('./set-navigation-state');

var _setNavigationState2 = _interopRequireDefault(_setNavigationState);

var _setCurrentYear = require('./set-current-year');

var _setCurrentYear2 = _interopRequireDefault(_setCurrentYear);

var _highlightSvgMap = require('./highlight-svg-map');

var _highlightSvgMap2 = _interopRequireDefault(_highlightSvgMap);

var _scrollex = require('./scrollex');

var _scrollex2 = _interopRequireDefault(_scrollex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * =========================================================================== *
 *                                CONFIGURATION
 * =========================================================================== *
 */
var titleConfig = {
	about: 'ðŸ™‹',
	blog: 'ðŸ“°',
	projects: 'ðŸ“¦',
	imprint: 'ðŸ“„',
	404: 'ðŸ”®'
};
var navigationConfig = {
	parent: (0, _helper.$)('#page-header'),
	className: 'active',
	url: ['/', '/is', '/writes', '/builds']
};
var scrollexConfig = {
	elements: (0, _helper.$$)('[data-scrollto]'),
	speed: 333,
	offset: -10
};
var scrollex = new _scrollex2.default(scrollexConfig);

/**
 * =========================================================================== *
 *                                  LET'S GO
 * =========================================================================== *
 */
// GENERAL
(0, _addEmojiTitle2.default)(titleConfig);
(0, _setNavigationState2.default)(navigationConfig);
(0, _setCurrentYear2.default)((0, _helper.$)('.footer-year'));
scrollex.init();

// PAGE SPECIFIC
if ((0, _helper.currentPage)('about')) {
	var mapConfig = {
		map: (0, _helper.$)('#map'),
		trigger: (0, _helper.$)('.travels-nextcity'),
		attr: 'data-area',
		hover: '#ff7c00',
		defaultState: '#3652cf'
	};

	(0, _highlightSvgMap2.default)(mapConfig);
}

},{"./add-emoji-title":1,"./helper":2,"./highlight-svg-map":3,"./scrollex":5,"./set-current-year":6,"./set-navigation-state":7}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _helper = require('./helper');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @name Scrollex
* @description Scrolls to the element defined in '[data-scrollto]'.
* @param {Object} options
* @example
* let scroll = new Scrollex({ elements: '.foo', speed: 550 });
* scroll.init();
*/

var Scrollex = function () {
	function Scrollex() {
		var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		_classCallCheck(this, Scrollex);

		this.keyword = options.keyword || 'data-scrollto';
		this.speed = options.speed || 333;
		this.elements = this.resolve(options.elements);
		this.increment = options.increment || 20;
		this.offset = options.offset || 10;
		this.callback = typeof options.callback === 'function' ? options.callback : function () {};
	}

	/**
 * @description Iterates through all nodes and stores them.
 * @param  {NodeList} nodes
 * @return {Array}
 */


	_createClass(Scrollex, [{
		key: 'resolve',
		value: function resolve(nodes) {
			var stored = [];
			for (var i = 0; i < nodes.length; i++) {
				var keyword = nodes[i].getAttribute(this.keyword);
				if (keyword === '#') keyword = 'body';
				stored[i] = [nodes[i], (0, _helper.$)(keyword)];
			}
			return stored;
		}

		/**
  * @description Sets the scrollTop value to the host element
  * @param  {Number} amount
  */

	}, {
		key: 'moveBody',
		value: function moveBody(amount) {
			document.documentElement.scrollTop = amount;
			document.body.scrollTop = amount;
		}

		/**
  * @description Blocks default behavior and scrolls to position defined by "this.keyword"
  * @param  {HTMLElement} item
  * @param  {Object} event
  */

	}, {
		key: 'scrollTo',
		value: function scrollTo(item, event) {
			var _this = this;

			event.preventDefault();
			event.target.blur();

			var currentTime = 0;
			var start = (0, _helper.windowPosition)();
			var change = item.getBoundingClientRect().top + this.offset;
			var animateScroll = function animateScroll() {
				currentTime += _this.increment;
				var easing = (0, _helper.easeInOutQuint)(currentTime, start, change, _this.speed);
				_this.moveBody(easing);
				if (currentTime < _this.speed) {
					(0, _helper.requestAnimFrame)()(animateScroll);
				} else if (_this.callback) {
					_this.callback();
				}
			};

			animateScroll();
		}

		/**
  * @description Initialises the module by adding all event listener
  */

	}, {
		key: 'init',
		value: function init() {
			for (var i = 0; i < this.elements.length; i++) {
				this.elements[i][0].addEventListener('click', this.scrollTo.bind(this, this.elements[i][1]), false);
			}
		}
	}]);

	return Scrollex;
}();

exports.default = Scrollex;

},{"./helper":2}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
// Inserts the current year into an element

exports.default = function (el) {
	return el.replaceChild(document.createTextNode(new Date().getFullYear()), // new node
	el.childNodes[0] // old node
	);
};

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = setNavigationState;
function setNavigationState() {
	var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	var location = window.location.pathname.split('/')[1].replace(/index\.html/g, '');
	var className = config.className || 'active';
	var isAvailableUrl = false;

	for (var i = 0; i < config.url.length; i++) {
		if (config.url[i] === '/' + location) {
			isAvailableUrl = true;
		}
	}

	if (isAvailableUrl) {
		var navElem = config.parent.querySelector('a[href="/' + location + '"]');
		if (navElem) navElem.classList.add(className);
	}
}

},{}]},{},[4]);
