(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function r(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
function x(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;left:-999px;white-space:nowrap;font:"+b+";"}function y(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;y(a)&&null!==a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);y(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,D=null,E=null;function H(){if(null===D){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}D=""!==a.style.font}return D}function I(a,b){return[a.style,a.weight,H()?a.stretch:"","100px",b].join(" ")}
A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",q=0,C=b||3E3,F=(new Date).getTime();return new Promise(function(a,b){null===E&&(E=!!document.fonts);if(E){var J=new Promise(function(a,b){function e(){(new Date).getTime()-F>=C?b():document.fonts.load(I(c,'"'+c.family+'"'),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),K=new Promise(function(a,c){q=setTimeout(c,C)});Promise.race([K,J]).then(function(){clearTimeout(q);a(c)},function(){b(c)})}else m(function(){function t(){var b;
if(b=-1!=f&&-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==u&&g==u&&h==u||f==v&&g==v&&h==v||f==w&&g==w&&h==w)),b=!b;b&&(null!==d.parentNode&&d.parentNode.removeChild(d),clearTimeout(q),a(c))}function G(){if((new Date).getTime()-F>=C)null!==d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===
a||void 0===a)f=e.a.offsetWidth,g=n.a.offsetWidth,h=p.a.offsetWidth,t();q=setTimeout(G,50)}}var e=new r(k),n=new r(k),p=new r(k),f=-1,g=-1,h=-1,u=-1,v=-1,w=-1,d=document.createElement("div");d.dir="ltr";x(e,I(c,"sans-serif"));x(n,I(c,"serif"));x(p,I(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);u=e.a.offsetWidth;v=n.a.offsetWidth;w=p.a.offsetWidth;G();z(e,function(a){f=a;t()});x(e,I(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;t()});x(n,
I(c,'"'+c.family+'",serif'));z(p,function(a){h=a;t()});x(p,I(c,'"'+c.family+'",monospace'))})})};"undefined"!==typeof module?module.exports=A:(window.FontFaceObserver=A,window.FontFaceObserver.prototype.load=A.prototype.load);}());

},{}],2:[function(require,module,exports){
(function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob()
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ]

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)

    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue+','+value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) { items.push(name) })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) { items.push(value) })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) { items.push([name, value]) })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body

    if (typeof input === 'string') {
      this.url = input
    } else {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body && input._bodyInit != null) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers()
    rawHeaders.split('\r\n').forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = 'status' in options ? options.status : 200
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers
  self.Request = Request
  self.Response = Response

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true
})(typeof self !== 'undefined' ? self : this);

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = addEmojiTitle;

var _helper = require('./helper');

function addEmojiTitle() {
	var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	var title = document.title.split('|');

	Object.keys(config).filter(function (page) {
		return (0, _helper.isMacOS)() && (0, _helper.currentPage)(page);
	}).forEach(function (page) {
		document.title = '' + title[0] + config[page] + ' | ' + title[1];
	});
}

},{"./helper":5}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = addGitHubStats;

require('whatwg-fetch');

var _helper = require('./helper');

var featured = ['atom-emoji-syntax', 'frontbook', 'papyrus'];
var listed = ['tetrys', 'browdash', 'domtimer', 'chrome-gist-word-count'];
var $projectsFeatured = (0, _helper.$)('.projects-featured');
var $projectsList = (0, _helper.$)('.projects-list');

function prepare(repositories) {
	return repositories.map(function (_ref) {
		var name = _ref.name,
		    html_url = _ref.html_url,
		    stargazers_count = _ref.stargazers_count;
		return {
			name: name.toLowerCase(),
			url: html_url,
			stars: stargazers_count
		};
	});
}

function filter(repositories) {
	return {
		featured: repositories.filter(function (repo) {
			return featured.indexOf(repo.name.toLowerCase()) >= 0;
		}),
		all: repositories.filter(function (repo) {
			return listed.indexOf(repo.name.toLowerCase()) >= 0;
		})
	};
}

function insertStarCount($wrapper, repo) {
	var name = repo.name,
	    stars = repo.stars;

	var shortened = name.replace(/atom/, '').replace(/-/g, '');
	var $starsEl = $wrapper.querySelector('.project-' + shortened + ' .project-stars');
	$starsEl.insertBefore(document.createTextNode(stars), $starsEl.childNodes[0]);
	$starsEl.style.display = 'flex';
}

function updateDOM(repositories) {
	console.log(repositories);
	repositories.featured.forEach(function (repo) {
		return insertStarCount($projectsFeatured, repo);
	});
	repositories.all.forEach(function (repo) {
		return insertStarCount($projectsList, repo);
	});
}

function addGitHubStats() {
	fetch('https://api.github.com/users/morkro/repos').then(function (data) {
		return data.json();
	}).then(prepare).then(filter).then(updateDOM).catch(console.error);
}

},{"./helper":5,"whatwg-fetch":2}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var $ = document.querySelector.bind(document);
var $$ = document.querySelectorAll.bind(document);

var getOffset = function getOffset(elem) {
	var offsetTop = 0;
	do {
		if (!isNaN(elem.offsetTop)) {
			offsetTop += elem.offsetTop;
		}
	} while (elem = elem.offsetParent);
	return offsetTop;
};

var isMacOS = function isMacOS() {
	return navigator.userAgent.indexOf('Mac OS X') != -1;
};

var currentPage = function currentPage(name) {
	if (!name) {
		var _ret = function () {
			var tmpl = /^template-/;
			var classes = [].concat(_toConsumableArray(document.body.classList));
			return {
				v: classes.find(function (name) {
					return tmpl.test(name);
				}).replace(tmpl, '')
			};
		}();

		if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	}
	return document.body.classList.contains('template-' + name);
};

var requestAnimFrame = function requestAnimFrame() {
	return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
		window.setTimeout(callback, 1000 / 60);
	};
};

var windowPosition = function windowPosition() {
	return document.documentElement.scrollTop || document.body.parentNode.scrollTop || document.body.scrollTop;
};

var easeInOutQuint = function easeInOutQuint(time, start, change, duration) {
	if ((time /= duration / 2) < 1) {
		return change / 2 * time * time * time * time * time + start;
	}
	return change / 2 * ((time -= 2) * time * time * time * time + 2) + start;
};

exports.$ = $;
exports.$$ = $$;
exports.getOffset = getOffset;
exports.isMacOS = isMacOS;
exports.currentPage = currentPage;
exports.requestAnimFrame = requestAnimFrame;
exports.easeInOutQuint = easeInOutQuint;
exports.windowPosition = windowPosition;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = highlightSVGMap;
function highlightSVGMap() {
	var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var trigger = config.trigger,
	    hover = config.hover,
	    defaultState = config.defaultState,
	    attr = config.attr,
	    map = config.map;

	if (!trigger.getAttribute(attr)) return;

	var country = map.querySelector('' + trigger.getAttribute(attr));

	function toggleHighlight(event) {
		if (event.type === 'mouseover') {
			country.style.fill = hover;
			country.style.stroke = 'white';
		} else {
			country.style.fill = 'white';
			country.style.stroke = defaultState;
		}
	}

	trigger.addEventListener('mouseover', toggleHighlight, false);
	trigger.addEventListener('mouseleave', toggleHighlight, false);
}

},{}],7:[function(require,module,exports){
'use strict';

var _fontfaceobserver = require('fontfaceobserver');

var _fontfaceobserver2 = _interopRequireDefault(_fontfaceobserver);

var _helper = require('./helper');

var _addEmojiTitle = require('./add-emoji-title');

var _addEmojiTitle2 = _interopRequireDefault(_addEmojiTitle);

var _setNavigationState = require('./set-navigation-state');

var _setNavigationState2 = _interopRequireDefault(_setNavigationState);

var _setCurrentYear = require('./set-current-year');

var _setCurrentYear2 = _interopRequireDefault(_setCurrentYear);

var _highlightSvgMap = require('./highlight-svg-map');

var _highlightSvgMap2 = _interopRequireDefault(_highlightSvgMap);

var _addGithubStats = require('./add-github-stats');

var _addGithubStats2 = _interopRequireDefault(_addGithubStats);

var _scrollex = require('./scrollex');

var _scrollex2 = _interopRequireDefault(_scrollex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * =========================================================================== *
 *                                CONFIGURATION
 * =========================================================================== *
 */
var fontRoboto = new _fontfaceobserver2.default('Roboto');
var fontRobotoMono = new _fontfaceobserver2.default('Roboto Mono');
var scrollex = new _scrollex2.default({
	elements: (0, _helper.$$)('[data-scrollto]'),
	speed: 333,
	offset: -10
});
var titleConfig = {
	about: '🙋',
	blog: '📰',
	projects: '📦',
	imprint: '📄',
	404: '🔮'
};
var navigationConfig = {
	parent: (0, _helper.$)('#page-header'),
	className: 'active',
	url: ['/', '/is', '/writes', '/builds']
};

/**
 * =========================================================================== *
 *                                  LET'S GO
 * =========================================================================== *
 */
// GENERAL
Promise.all([fontRoboto.load(), fontRobotoMono.load()]).then(function () {
	return document.body.classList.add('fonts-loaded');
});
(0, _addEmojiTitle2.default)(titleConfig);
(0, _setNavigationState2.default)(navigationConfig);
(0, _setCurrentYear2.default)((0, _helper.$)('.footer-year'));
scrollex.init();

// PAGE SPECIFIC
if ((0, _helper.currentPage)('about')) {
	(0, _highlightSvgMap2.default)({
		map: (0, _helper.$)('#map'),
		trigger: (0, _helper.$)('.travels-nextcity'),
		attr: 'data-area',
		hover: '#ff7c00',
		defaultState: '#3652cf'
	});
} else if ((0, _helper.currentPage)('projects')) {
	(0, _addGithubStats2.default)();
}

},{"./add-emoji-title":3,"./add-github-stats":4,"./helper":5,"./highlight-svg-map":6,"./scrollex":8,"./set-current-year":9,"./set-navigation-state":10,"fontfaceobserver":1}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _helper = require('./helper');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @name Scrollex
* @description Scrolls to the element defined in '[data-scrollto]'.
* @param {Object} options
* @example
* let scroll = new Scrollex({ elements: '.foo', speed: 550 })
* scroll.init()
*/
var Scrollex = function () {
	function Scrollex() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, Scrollex);

		this.keyword = options.keyword || 'data-scrollto';
		this.speed = options.speed || 333;
		this.elements = this.resolve(options.elements);
		this.increment = options.increment || 20;
		this.offset = options.offset || 10;
		this.callback = typeof options.callback === 'function' ? options.callback : function () {};
	}

	/**
 * @description Iterates through all nodes and stores them.
 * @param  {NodeList} nodes
 * @return {Array}
 */


	_createClass(Scrollex, [{
		key: 'resolve',
		value: function resolve(nodes) {
			var stored = [];
			for (var i = 0; i < nodes.length; i++) {
				var keyword = nodes[i].getAttribute(this.keyword);
				if (keyword === '#') keyword = 'body';
				stored[i] = [nodes[i], (0, _helper.$)(keyword)];
			}
			return stored;
		}

		/**
  * @description Sets the scrollTop value to the host element
  * @param  {Number} amount
  */

	}, {
		key: 'moveBody',
		value: function moveBody(amount) {
			document.documentElement.scrollTop = amount;
			document.body.scrollTop = amount;
		}

		/**
  * @description Blocks default behavior and scrolls to position defined by "this.keyword"
  * @param  {HTMLElement} item
  * @param  {Object} event
  */

	}, {
		key: 'scrollTo',
		value: function scrollTo(item, event) {
			var _this = this;

			event.preventDefault();
			event.target.blur();

			var currentTime = 0;
			var start = (0, _helper.windowPosition)();
			var change = item.getBoundingClientRect().top + this.offset;
			var animateScroll = function animateScroll() {
				currentTime += _this.increment;
				var easing = (0, _helper.easeInOutQuint)(currentTime, start, change, _this.speed);
				_this.moveBody(easing);
				if (currentTime < _this.speed) {
					(0, _helper.requestAnimFrame)()(animateScroll);
				} else if (_this.callback) {
					_this.callback();
				}
			};

			animateScroll();
		}

		/**
  * @description Initialises the module by adding all event listener
  */

	}, {
		key: 'init',
		value: function init() {
			for (var i = 0; i < this.elements.length; i++) {
				this.elements[i][0].addEventListener('click', this.scrollTo.bind(this, this.elements[i][1]), false);
			}
		}
	}]);

	return Scrollex;
}();

exports.default = Scrollex;

},{"./helper":5}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

// Inserts the current year into an element
exports.default = function (el) {
	return el.replaceChild(document.createTextNode(new Date().getFullYear()), // new node
	el.childNodes[0] // old node
	);
};

},{}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = setNavigationState;
function setNavigationState() {
	var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	var location = window.location.pathname.split('/')[1].replace(/index\.html/g, '');
	var className = config.className || 'active';
	var isAvailableUrl = false;

	for (var i = 0; i < config.url.length; i++) {
		if (config.url[i] === '/' + location) {
			isAvailableUrl = true;
		}
	}

	if (isAvailableUrl) {
		var navElem = config.parent.querySelector('a[href="/' + location + '"]');
		if (navElem) navElem.classList.add(className);
	}
}

},{}]},{},[7]);
